options {
    IGNORE_CASE = true;
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
    DEBUG_PARSER = true;
    LOOKAHEAD = 1;
    DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(LanguageParser)
package classes;

import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import util.OutputData;

public class LanguageParser {
    private int contParseError = 0;
    private boolean debugRecovery = true;
    private final static List<AErrorStruct> output = new ArrayList<AErrorStruct>();
    private boolean eof;

    public static List<Token> getTokens(String stream) {
        InputStream target = new ByteArrayInputStream(stream.getBytes());
        LanguageParser parser = new LanguageParser(target);
        return tokenize(parser);
    }

    public static ArrayList<AErrorStruct> analisadorSintatico(String input) {
      ArrayList<AErrorStruct> output = new ArrayList<>();
      LanguageParser parser = create(input);
      int maxAttempts = 100; // Limite de tentativas para evitar loop infinito
      int attempts = 0;
  
      while (attempts < maxAttempts) {
          try {
              parser.programa();
              break; // Saia do loop se a análise for bem-sucedida
          } catch (ParseException e) {
              output.add(new AErrorStruct("Erro parsing programa.\n", e));
              parser.advanceAfterError(); // Avance no fluxo de entrada após encontrar um erro
              attempts++;
          }
      }
  
      if (attempts >= maxAttempts) {
          output.add(new AErrorStruct("Erro: Limite de tentativas atingido ao tentar avançar após erro.", null));
      }
  
      return output;
    }

    private void advanceAfterError() {
        int maxAttempts = 100; // Limite de tentativas para evitar loop infinito
        int attempts = 0;

        while (attempts < maxAttempts) {
            try {
                Token token = getNextToken();
                System.out.println("Consumed token: " + token); // Adicione esta linha para depuração
                if (token.kind == EOF || isSafePoint(token)) {
                    break;
                }
            } catch (Exception e) {
                break;
            }
            attempts++;
        }

        if (attempts >= maxAttempts) {
            System.err.println("Erro: Limite de tentativas atingido ao tentar avançar após erro.");
        }
    }

    private boolean isSafePoint(Token token) {
        return token.kind == PONTOVIRGULA || token.kind == FECHA_PARENTESES || token.kind == EOF || token.kind == END || token.kind == PONTO;
    }

    public static LanguageParser create(String stream) {
        InputStream target = new ByteArrayInputStream(stream.getBytes());
        return new LanguageParser(target);
    }

    public static void main(String[] args) throws TokenMgrError, ParseException {
        LanguageParser parser;
        if (args.length == 0) {
            parser = new LanguageParser(System.in);
        } else if (args.length == 1) {
            try {
                parser = new LanguageParser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("LanguageParser: file " + args[0] + " was NAO found.");
                return;
            }
        }
    }

    public static List<Token> tokenize(LanguageParser parser) {
        List<Token> tokens = new ArrayList<Token>();
        Token token = parser.getNextToken();

        while (token.kind != LanguageParserConstants.EOF) {
            tokens.add(token);
            token = parser.getNextToken();
        }

        if (!ATokenHandler.isClosed()) {
            tokens.add(ATokenHandler.createToken());
        }
        return tokens;
    }

    static public String im(int x) {
        String s = tokenImage[x];
        int k = s.lastIndexOf("\"");
        try {
            s = s.substring(1, k);
        } catch (StringIndexOutOfBoundsException e) {
            // Handle exception OU log if necessary
        }
        return s;
    }

    public void consumeUntil(ARecoverySet g, ParseException e, String met) throws ParseException {
        Token tok;
        if (g == null) {
            throw e;
        }
        tok = getToken(1);
        while (!eof) {
            if (g.contains(tok.kind)) {
                break;
            }
            getNextToken();
            tok = getToken(1);
            if (tok.kind == EOF && !g.contains(EOF)) {
                eof = true;
            }
        }
        contParseError++;
    }
}

PARSER_END(LanguageParser)
//TOKENS
//CARACTERES ESPECIAIS IGNORADOS
SKIP : {
    <NovaLinha: (" " | "\t" | "\n" | "\r" | "\f" | "\r\n"  |  "\n\r")>
}
// DECLARAÇÕES DE GERENCIAMENTO DE TOKEN
TOKEN_MGR_DECLS: {
    public static int numcomments = 0;
}
//COMENTARIO DE LINHA Tudo será ignorado após o // e quando chegar no /n o que estiver escrito não será mais ignorado
SKIP:
{
    "//": COMENTARIO_LINHA
}
<COMENTARIO_LINHA> SKIP:
{
        <["\n" , "\r"]> : DEFAULT
    |   <~[]>
}

SKIP : {
    "/*" {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Comentario de bloco nao finalizado", jjmatchedKind);}: COMENTARIO_BLOCO
}
<COMENTARIO_BLOCO> SKIP : {
    "*/" {OutputData.removeLastOutputInvalid();}: DEFAULT |
    <~[]>
}
//PALAVRA RESERVADA
TOKEN [IGNORE_CASE]:
{
    <DO: "do"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <MAKE: "make"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <END: "end"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <CONST:"const"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <VAR:"var"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <INT:"int"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <REAL: "real"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <CHAR: "char"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <BOOL: "bool"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <GET: "get"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <PUT: "put"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <IF: "if"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <THEN: "then"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <ELSE: "else"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <TRUE: "true"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <FALSE: "false"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
    | <WHILE: "while"> { OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Palavra Reservada", jjmatchedKind); }
}

//Simbolo Especial
TOKEN :
{
    <ABRE_PARENTESES:"(">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Simbolo Especial", jjmatchedKind); }
    |<FECHA_PARENTESES: ")">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Simbolo Especial", jjmatchedKind); }
    |<PONTO: ".">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Simbolo Especial", jjmatchedKind); }
    |<VIRGULA: ",">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Simbolo Especial", jjmatchedKind); }
    |<DOISPONTOS: ":">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Simbolo Especial", jjmatchedKind); }
    |<ATRIBUICAO:"->">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Simbolo Especial", jjmatchedKind); }
    |<PONTOVIRGULA: ";">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Simbolo Especial", jjmatchedKind); }
}

//Simbolo Especial Operadores Aritiméticos
TOKEN :
{
    <ADICAO:"+">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Aritmético", jjmatchedKind); }
    |<SUBTRACAO:"-">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Aritmético", jjmatchedKind); }
    |<MULTIPLICACAO:"*">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Aritmético", jjmatchedKind); }
    |<DIVISAO:"/">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Aritmético", jjmatchedKind); }
    |<POTENCIA:"**">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Aritmético", jjmatchedKind); }
    |<DIVISAO_INTEIRA:"%">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Aritmético", jjmatchedKind); }
    |<RESTO:"%%">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Aritmético", jjmatchedKind); }
}

//Simbolo Especial Operadores Relacionais
TOKEN :
{
    <IGUAL:"=">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Relacional", jjmatchedKind); }
    |<DIFERENTE:"<>">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Relacional", jjmatchedKind); }
    |<MENOR:"<">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Relacional", jjmatchedKind); }
    |<MAIOR:">">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Relacional", jjmatchedKind); }
    |<MENOR_IGUAL:"<=">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Relacional", jjmatchedKind); }
    |<MAIOR_IGUAL:">=">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Relacional", jjmatchedKind); }
}

//Simbolo Especial Operadores Lógicos
TOKEN :
{
    <E:"&">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Lógico", jjmatchedKind); }
    |<OU:"|">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Lógico", jjmatchedKind); }
    |<NAO:"!">{ OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Operador Lógico", jjmatchedKind); }
}

//CONSTANTES NUMÉRICAS
TOKEN :
{
     <#DIGITO: ["0"-"9"]>
    |<CONSTANTE_INTEIRA: <DIGITO> (<DIGITO>)? (<DIGITO>)? > {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Constante Inteira", jjmatchedKind); }
    |<CONSTANTE_REAL:(<DIGITO> (<DIGITO>)? (<DIGITO>)? (<DIGITO>)? <PONTO> <DIGITO> (<DIGITO>)?)>{OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Constante Real", jjmatchedKind); }
}

//CONSTANTE LITERAIS 'PALAVRAS' OU "FRASES"
TOKEN :
{
    <CONSTANTE_LITERAL: "\"" (~["\n","\r","\"","\'"])*"\"" | "'"(~["\n","\r","\"","\'"])*"'">{OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Constante Literal", jjmatchedKind);                                            }
}

//IDENTIFICADORES EXEMPLOS VÁLIDOS:
TOKEN :
{
      <#LETRA: ["A"-"Z","a"-"z"]>
    | <IDENTIFICADOR: (<LETRA> |"_")+((<DIGITO>(<LETRA>|"_")+)*)>{OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Identificador válido", jjmatchedKind);}
}

//ERROS O ~FAZ A NEGAÇÃO DOS SIMBOLOS VÁLIDOS, ENTÃO QUALQUER SIMBOLO DIFERENTE DESSES SERÃO INVÁLIDADOS
TOKEN :
{
     <SIMBOLO_INVALIDO:
         (~["a"-"z","A"-"Z","0"-"9",
         "\n","\r","\t","\f"," ",
         "(", ")", ";", ".", ",", ":", "+", "-", "*", "/", "*", "%", "=", "<", ">", "&", "|", "!" ])+>
         {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Caractere Inválido", jjmatchedKind);}
    | <CONSTANTE_INTEIRA_INVALIDA: <DIGITO> (<DIGITO>)? (<DIGITO>)? (<DIGITO>)+>{OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Constante Interia invalida", jjmatchedKind);}
    | <CONSTANTE_REAL_INVALIDA:
        <DIGITO> (<DIGITO>)? (<DIGITO>)? (<DIGITO>)? (<DIGITO>)+ <PONTO> <DIGITO> (<DIGITO>)? |
        <DIGITO> (<DIGITO>)? (<DIGITO>)? (<DIGITO>)? <PONTO> <DIGITO> (<DIGITO>)? (<DIGITO>)+ |
        <DIGITO> (<DIGITO>)? (<DIGITO>)? (<DIGITO>)? <PONTO> <PONTO> |
        <PONTO> (<DIGITO>)+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Constante Real invalida", jjmatchedKind);}
    | <CONSTANTE_LITERAL_INVALIDA: "\""(~["\n","\r","\"","\'"])*~["\""] | "'"(~["\n","\r","\"","\'"])*~["\'"]>{OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Constante Literal invalida", jjmatchedKind);}
    | <IDENTIFICADOR_INVALIDO:
       (<LETRA> | "_") ((<LETRA> | "_")* (<DIGITO> <LETRA> | <LETRA> <DIGITO>)?)*
       | (<LETRA> | "_") (<LETRA> | "_" | <DIGITO>)* <DIGITO>> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Identificador inválido", jjmatchedKind);}

}

//Analisador Sintatico
// Produções
void programa() :
{}
{
    <MAKE> identificador_do_programa() declaracao_constantes_variaveis() lista_comandos() <END> <PONTO>
}

void identificador_do_programa() :
{}
{
    [identificador()]
}

void declaracao_constantes_variaveis() :
{}
{
    (constantes_e_variaveis())?
}

void constantes_e_variaveis() :
{}
{
    (declaracao_constantes() constantes_e_variaveis_prime() | declaracao_variaveis() constantes_e_variaveis_prime())
}

void constantes_e_variaveis_prime() :
{}
{
    (declaracao_constantes() constantes_e_variaveis_prime() | declaracao_variaveis() constantes_e_variaveis_prime())?
}

void declaracao_constantes() :
{}
{
    <CONST> constantes() <END> <PONTOVIRGULA>
}

void constantes() :
{}
{
    tipo() <DOISPONTOS> lista_identificadores() <IGUAL> valor() <PONTO> constantes_prime()
}

void constantes_prime() :
{}
{
    (constantes())?
}

void declaracao_variaveis() :
{}
{
    <VAR> variaveis() <END> <PONTOVIRGULA>
}

void variaveis() :
{}
{
    tipo() <DOISPONTOS> lista_identificadores() <PONTO> variaveis_prime()
}

void variaveis_prime() :
{}
{
    (variaveis())?
}

void tipo() :
{}
{
    <INT> | <REAL> | <CHAR> | <BOOL>
}

void lista_identificadores() :
{}
{
    identificador() lista_identificadores_prime()
}

void lista_identificadores_prime() :
{}
{
    (<VIRGULA> lista_identificadores())?
}

void lista_comandos() :
{}
{
    comando() <PONTO> lista_comandos_prime()
}

void lista_comandos_prime() :
{}
{
    (lista_comandos())?
}

void comando() :
{}
{
    atribuicao() | entrada() | saida() | selecao() | repeticao()
}

void atribuicao() :
{}
{
    expressao() <ATRIBUICAO> identificador()
}

void entrada() :
{}
{
    <GET> <ABRE_PARENTESES> lista_identificadores() <FECHA_PARENTESES>
}

void saida() :
{}
{
    <PUT> <ABRE_PARENTESES> lista_identificadores_e_ou_constantes() <FECHA_PARENTESES>
}

void lista_identificadores_e_ou_constantes() :
{}
{
    item() lista_identificadores_e_ou_constantes_prime()
}

void lista_identificadores_e_ou_constantes_prime() :
{}
{
    (<VIRGULA> lista_identificadores_e_ou_constantes())?
}

void item() :
{}
{
    identificador() | <CONSTANTE_INTEIRA> | <CONSTANTE_REAL> | <CONSTANTE_LITERAL> | <TRUE> | <FALSE>
}

void selecao() :
{}
{
    <IF> expressao() <THEN> lista_comandos() senao() <END> <PONTO>
}

void senao() :
{}
{
    (<ELSE> lista_comandos())?
}

void repeticao() :
{}
{
    <WHILE> expressao() <DO> lista_comandos() <END> <PONTO>
}

void expressao() :
{}
{
    expressao_aritmetica_ou_logica() expressao_prime()
}

void expressao_prime() :
{}
{
    (<IGUAL> expressao_aritmetica_ou_logica()
    | <DIFERENTE> expressao_aritmetica_ou_logica()
    | <MENOR> expressao_aritmetica_ou_logica()
    | <MAIOR> expressao_aritmetica_ou_logica()
    | <MENOR_IGUAL> expressao_aritmetica_ou_logica()
    | <MAIOR_IGUAL> expressao_aritmetica_ou_logica())?
}

void expressao_aritmetica_ou_logica() :
{}
{
    termo2() menor_prioridade()
}

void menor_prioridade() :
{}
{
    (<ADICAO> termo2() menor_prioridade()
    | <SUBTRACAO> termo2() menor_prioridade()
    | <OU> termo2() menor_prioridade())?
}

void termo2() :
{}
{
    termo1() media_prioridade()
}

void media_prioridade() :
{}
{
    (<MULTIPLICACAO> termo1() media_prioridade()
    | <DIVISAO> termo1() media_prioridade()
    | <DIVISAO_INTEIRA> termo1() media_prioridade()
    | <RESTO> termo1() media_prioridade()
    | <E> termo1() media_prioridade())?
}

void termo1() :
{}
{
    elemento() maior_prioridade()
}

void maior_prioridade() :
{}
{
    (<POTENCIA> elemento() maior_prioridade())?
}

void elemento() :
{}
{
    identificador() | <CONSTANTE_INTEIRA> | <CONSTANTE_REAL> | <CONSTANTE_LITERAL> | <TRUE> | <FALSE> | <ABRE_PARENTESES> expressao() <FECHA_PARENTESES> | <NAO> <ABRE_PARENTESES> expressao() <FECHA_PARENTESES>
}

void identificador() :
{}
{
    <IDENTIFICADOR>
}

void valor() :
{}
{
    <CONSTANTE_INTEIRA> | <CONSTANTE_REAL> | <CONSTANTE_LITERAL> | <TRUE> | <FALSE>
}